# Claude Code UI Environment Configuration
# Copy this file to .env and configure your settings

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================

# Backend server port (Express API + WebSocket server)
PORT=3002

# Frontend development port (only used in development mode)
VITE_PORT=3000

# JWT secret for authentication (change in production!)
JWT_SECRET=claude-ui-secure-secret-change-in-production

# Optional API key for additional security
# If set, all API requests must include this key in the Authorization header
API_KEY=

# Node environment
NODE_ENV=production

# =============================================================================
# CLAUDE AI CONFIGURATION
# =============================================================================

# Anthropic API Key for Claude AI
# Get this from: https://console.anthropic.com/settings/keys
ANTHROPIC_API_KEY=

# Claude API endpoint (usually not needed unless using a proxy)
# Default: https://api.anthropic.com
ANTHROPIC_API_URL=

# Default Claude model to use
# Options: claude-3-5-sonnet-20241022, claude-3-opus-20240229, etc.
CLAUDE_DEFAULT_MODEL=claude-3-5-sonnet-20241022

# Default permission mode for Claude
# Options: default, ask, plan, allow
CLAUDE_PERMISSION_MODE=default

# Additional directories to allow Claude tool access to (comma-separated)
CLAUDE_ADDITIONAL_DIRS=

# Default system prompt to append to Claude
CLAUDE_SYSTEM_PROMPT=

# Enable dangerous skip permissions by default (not recommended)
CLAUDE_SKIP_PERMISSIONS=false

# =============================================================================
# GITHUB INTEGRATION
# =============================================================================

# GitHub username for git operations
GITHUB_USERNAME=

# GitHub email for git commits
GITHUB_EMAIL=

# GitHub Personal Access Token for API access and HTTPS git operations
# Create at: https://github.com/settings/tokens
# Needs repo, user, and workflow permissions
GITHUB_PAT=

# GitHub API endpoint (for enterprise users)
# Default: https://api.github.com
GITHUB_API_URL=https://api.github.com

# Auto-configure git with GitHub credentials on container start
GITHUB_AUTO_CONFIG=true

# =============================================================================
# GIT CONFIGURATION
# =============================================================================

# Default git user name (fallback if GITHUB_USERNAME not set)
GIT_USER_NAME=

# Default git user email (fallback if GITHUB_EMAIL not set)  
GIT_USER_EMAIL=

# Git credential helper
# Options: store, cache, manager, etc.
GIT_CREDENTIAL_HELPER=store

# =============================================================================
# OPENAI INTEGRATION (for transcription)
# =============================================================================

# OpenAI API key for audio transcription features
# Get this from: https://platform.openai.com/api-keys
OPENAI_API_KEY=

# =============================================================================
# PROJECT DISCOVERY
# =============================================================================

# Base folder to discover existing projects from
# If set, the app will scan this directory for git repositories
BASE_PROJECTS_FOLDER=

# Home directory override (usually automatically detected)
HOME=/home/claude

# =============================================================================
# SECURITY & NETWORKING
# =============================================================================

# CORS origins (comma-separated list of allowed origins)
CORS_ORIGINS=http://localhost:3000,http://localhost:3002

# Enable HTTPS (requires SSL certificates)
HTTPS_ENABLED=false

# SSL certificate paths (if HTTPS_ENABLED=true)
SSL_CERT_PATH=
SSL_KEY_PATH=

# =============================================================================
# LOGGING & DEBUGGING
# =============================================================================

# Log level
# Options: error, warn, info, debug
LOG_LEVEL=info

# Enable debug mode
DEBUG=false

# Enable MCP debug mode
MCP_DEBUG=false

# =============================================================================
# CONTAINER CONFIGURATION
# =============================================================================

# Container timezone
TZ=UTC

# User ID for file permissions (should match host user)
USER_ID=1001

# Group ID for file permissions (should match host group)
GROUP_ID=1001

# =============================================================================
# BACKUP & STORAGE
# =============================================================================

# Automatic backup interval in hours (0 to disable)
BACKUP_INTERVAL=24

# Maximum number of backups to keep
BACKUP_MAX_COUNT=7

# Backup storage path
BACKUP_PATH=/app/backups

# =============================================================================
# PERFORMANCE
# =============================================================================

# File watcher debounce time in milliseconds
FILE_WATCHER_DEBOUNCE=300

# Maximum file size for editing (in bytes)
MAX_FILE_SIZE=10485760

# Session timeout in hours
SESSION_TIMEOUT=24

# =============================================================================
# WATCHTOWER CONFIGURATION (Auto-Updates)
# =============================================================================

# Enable Watchtower automatic updates
WATCHTOWER_ENABLE=true

# Update schedule in cron format (default: daily at 3 AM)
# Format: "0 0 3 * * *" (sec min hour day month weekday)
WATCHTOWER_SCHEDULE=0 0 3 * * *

# Poll interval in seconds (alternative to schedule, 0 to disable)
WATCHTOWER_POLL_INTERVAL=0

# Clean up old images after updating (recommended)
WATCHTOWER_CLEANUP=true

# Include stopped containers in updates
WATCHTOWER_INCLUDE_STOPPED=false

# Update strategy: immediate or manual
# immediate: Update containers immediately when new image found
# manual: Only check for updates, don't auto-update
WATCHTOWER_RUN_ONCE=false

# Enable debug logging for Watchtower
WATCHTOWER_DEBUG=false

# Only monitor specific containers (comma-separated, empty = all)
WATCHTOWER_SCOPE=

# Notification settings (optional)
WATCHTOWER_NOTIFICATIONS=shoutrrr
WATCHTOWER_NOTIFICATION_URL=

# Notification template (optional)
WATCHTOWER_NOTIFICATION_TEMPLATE=

# Slack webhook URL for notifications (if using Slack)
WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL=

# Discord webhook URL for notifications (if using Discord)
WATCHTOWER_NOTIFICATION_DISCORD_HOOK_URL=

# Microsoft Teams webhook URL for notifications (if using Teams)
WATCHTOWER_NOTIFICATION_MSTEAMS_HOOK_URL=

# Email notification settings (if using email)
WATCHTOWER_NOTIFICATION_EMAIL_FROM=
WATCHTOWER_NOTIFICATION_EMAIL_TO=
WATCHTOWER_NOTIFICATION_EMAIL_SERVER=
WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=587
WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=
WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=

# Stop grace period in seconds before force-killing containers
WATCHTOWER_TIMEOUT=10

# Rolling restart (restart containers one by one)
WATCHTOWER_ROLLING_RESTART=false